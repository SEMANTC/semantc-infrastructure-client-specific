name: Terraform Deploy

on:
  repository_dispatch:
    types: [new_tenant]

jobs:
  terraform-deploy:
    name: Terraform Deploy
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Setup Google Cloud SDK
        uses: google-github-actions/setup-gcloud@v1
        with:
          project_id: ${{ secrets.GCP_PROJECT }}

      # **Added Step: Create GCS Bucket if It Doesn't Exist**
      - name: Create GCS Bucket if Not Exists
        run: |
          BUCKET_NAME="terraform-state-semantic-dev"
          REGION="${{ secrets.GCP_REGION }}"
          PROJECT_ID="${{ secrets.GCP_PROJECT }}"
          
          if ! gsutil ls -b gs://$BUCKET_NAME/ 2>/dev/null; then
            echo "Bucket $BUCKET_NAME does not exist. Creating..."
            gsutil mb -p $PROJECT_ID -c STANDARD -l $REGION gs://$BUCKET_NAME/
            gsutil uniformbucketlevelaccess set on gs://$BUCKET_NAME/
            echo "Bucket $BUCKET_NAME created."
          else
            echo "Bucket $BUCKET_NAME already exists."
          fi

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: '1.3.0'

      - name: Terraform Init
        run: |
          terraform init \
            -backend-config="bucket=terraform-state-semantic-dev" \
            -backend-config="prefix=terraform/tenant_state/${{ github.event.client_payload.tenant_id }}"
        working-directory: ./terraform

      - name: Terraform Validate
        run: terraform validate
        working-directory: ./terraform

      - name: Create terraform.tfvars.json
        run: |
          echo '{
            "new_tenant_id": "'"${{ github.event.client_payload.tenant_id }}"'",
            "new_tenant_token": {
              "access_token": "'"${{ github.event.client_payload.tenant_token.access_token }}"'",
              "expires_in": '"${{ github.event.client_payload.tenant_token.expires_in }}"',
              "expires_at": '"${{ github.event.client_payload.tenant_token.expires_at }}"',
              "token_type": "'"${{ github.event.client_payload.tenant_token.token_type }}"'",
              "refresh_token": "'"${{ github.event.client_payload.tenant_token.refresh_token }}"'",
              "id_token": "'"${{ github.event.client_payload.tenant_token.id_token }}"'",
              "scope": "'"${{ github.event.client_payload.tenant_token.scope }}"'"
            }
          }' > ./terraform/terraform.tfvars.json

      - name: Verify terraform.tfvars.json
        run: |
          cat ./terraform/terraform.tfvars.json | jq '{
            new_tenant_id: .new_tenant_id,
            new_tenant_token: {
              access_token: "****",
              expires_in: .new_tenant_token.expires_in,
              expires_at: .new_tenant_token.expires_at,
              token_type: .new_tenant_token.token_type,
              refresh_token: "****",
              id_token: "****",
              scope: .new_tenant_token.scope
            }
          }'
        working-directory: ./terraform

      - name: Terraform Plan
        id: plan
        run: |
          TF_LOG=DEBUG terraform plan -out=tfplan -var-file=terraform.tfvars.json 2>&1 | tee terraform_plan.log
        working-directory: ./terraform

      - name: Upload Terraform Plan Log
        uses: actions/upload-artifact@v3
        with:
          name: terraform-plan-log
          path: ./terraform/terraform_plan.log

      - name: Terraform Apply
        run: terraform apply -auto-approve tfplan
        working-directory: ./terraform

      - name: Save Outputs
        if: success()
        run: terraform output -json > terraform_outputs.json
        working-directory: ./terraform

      - name: Upload Terraform Outputs
        if: success()
        uses: actions/upload-artifact@v3
        with:
          name: terraform-outputs
          path: ./terraform/terraform_outputs.json

      - name: Trigger Data Ingestion Job
        if: success()
        run: |
          gcloud run jobs execute data-ingestion-${{ github.event.client_payload.tenant_id }} \
            --region=${{ secrets.GCP_REGION }} \
            --project=${{ secrets.GCP_PROJECT }}

  terraform-destroy:
    name: Terraform Destroy on Failure
    runs-on: ubuntu-latest
    needs: terraform-deploy
    if: failure()
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Setup Google Cloud SDK
        uses: google-github-actions/setup-gcloud@v1
        with:
          project_id: ${{ secrets.GCP_PROJECT }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: '1.3.0'

      - name: Terraform Init for Destroy
        run: |
          terraform init \
            -backend-config="bucket=terraform-state-semantic-dev" \
            -backend-config="prefix=terraform/tenant_state/${{ github.event.client_payload.tenant_id }}"
        working-directory: ./terraform

      - name: Terraform Destroy
        run: terraform destroy -auto-approve -var-file=terraform.tfvars.json
        working-directory: ./terraform