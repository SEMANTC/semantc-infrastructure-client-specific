name: Terraform Deploy

on:
  repository_dispatch:
    types: [new_tenant]

env:
  TF_VERSION: '1.3.0'
  BUCKET_NAME: terraform-state-semantic-dev

jobs:
  terraform-deploy:
    name: Terraform Deploy
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Setup Google Cloud SDK
        uses: google-github-actions/setup-gcloud@v1
        with:
          project_id: ${{ secrets.GCP_PROJECT }}

      - name: Create or Verify GCS Buckets
        run: |
          echo "Checking if Terraform state bucket $BUCKET_NAME exists..."
          if ! gsutil ls -b gs://$BUCKET_NAME > /dev/null 2>&1; then
            echo "Bucket $BUCKET_NAME does not exist. Creating..."
            if gsutil mb -p ${{ secrets.GCP_PROJECT }} -c STANDARD -l ${{ secrets.GCP_REGION }} gs://$BUCKET_NAME; then
              echo "Bucket $BUCKET_NAME created successfully."
              gsutil versioning set on gs://$BUCKET_NAME
            else
              echo "Failed to create bucket $BUCKET_NAME"
              exit 1
            fi
          else
            echo "Bucket $BUCKET_NAME already exists."
          fi
          
          TENANT_BUCKET="tenant-${{ github.event.client_payload.tenant_id }}-bucket-xero"
          echo "Checking if tenant bucket $TENANT_BUCKET exists..."
          if ! gsutil ls -b gs://$TENANT_BUCKET > /dev/null 2>&1; then
            echo "Tenant bucket $TENANT_BUCKET does not exist. It will be created by Terraform."
          else
            echo "Tenant bucket $TENANT_BUCKET already exists."
          fi

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Create terraform.tfvars.json
        run: |
          echo '{
            "new_tenant_id": "${{ github.event.client_payload.tenant_id }}",
            "new_tenant_token": ${{ toJson(github.event.client_payload.tenant_token) }}
          }' > ./terraform/terraform.tfvars.json

      - name: Verify terraform.tfvars.json
        run: |
          if [ ! -f ./terraform/terraform.tfvars.json ]; then
            echo "terraform.tfvars.json file not found!"
            exit 1
          fi
          cat ./terraform/terraform.tfvars.json | jq '{
            new_tenant_id: .new_tenant_id,
            new_tenant_token: {
              access_token: "****",
              expires_in: .new_tenant_token.expires_in,
              expires_at: .new_tenant_token.expires_at,
              token_type: .new_tenant_token.token_type,
              refresh_token: "****",
              id_token: "****",
              scope: .new_tenant_token.scope
            }
          }'
        working-directory: ./terraform

      - name: Remove Terraform Lock (if exists)
        run: |
          gsutil rm gs://$BUCKET_NAME/terraform/tenant_state/${{ github.event.client_payload.tenant_id }}/default.tflock || true
        continue-on-error: true

      - name: Terraform Init
        run: |
          terraform init \
            -backend-config="bucket=$BUCKET_NAME" \
            -backend-config="prefix=terraform/tenant_state/${{ github.event.client_payload.tenant_id }}"
        working-directory: ./terraform

      - name: Terraform Validate
        run: terraform validate
        working-directory: ./terraform

      - name: Terraform Plan
        id: plan
        run: |
          set +e
          for i in {1..3}; do
            TF_LOG=DEBUG terraform plan -out=tfplan -var-file=terraform.tfvars.json 2>&1 | tee terraform_plan.log
            exit_code=$?
            if [ $exit_code -eq 0 ]; then
              echo "Terraform plan succeeded"
              break
            else
              echo "Attempt $i failed. Retrying in 10 seconds..."
              sleep 10
            fi
          done
          if [ $exit_code -ne 0 ]; then
            echo "Terraform plan failed after 3 attempts"
            exit $exit_code
          fi
        working-directory: ./terraform

      - name: Upload Terraform Plan Log
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: terraform-plan-log
          path: ./terraform/terraform_plan.log

      - name: Terraform Apply
        id: apply
        if: success()
        run: |
          set +e
          TF_LOG=DEBUG terraform apply -auto-approve tfplan 2>&1 | tee terraform_apply.log
          exit_code=$?
          if [ $exit_code -ne 0 ]; then
            echo "Terraform apply failed"
            exit $exit_code
          fi
        working-directory: ./terraform

      - name: Upload Terraform Apply Log
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: terraform-apply-log
          path: ./terraform/terraform_apply.log

      - name: Save Outputs
        if: success()
        run: terraform output -json > terraform_outputs.json
        working-directory: ./terraform

      - name: Upload Terraform Outputs
        if: success()
        uses: actions/upload-artifact@v3
        with:
          name: terraform-outputs
          path: ./terraform/terraform_outputs.json

      - name: Trigger Data Ingestion Job
        if: success()
        run: |
          gcloud run jobs execute data-ingestion-${{ github.event.client_payload.tenant_id }} \
            --region=${{ secrets.GCP_REGION }} \
            --project=${{ secrets.GCP_PROJECT }}

  terraform-destroy:
    name: Terraform Destroy on Failure
    runs-on: ubuntu-latest
    needs: terraform-deploy
    if: failure()
    
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Setup Google Cloud SDK
        uses: google-github-actions/setup-gcloud@v1
        with:
          project_id: ${{ secrets.GCP_PROJECT }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Create terraform.tfvars.json
        run: |
          echo '{
            "new_tenant_id": "${{ github.event.client_payload.tenant_id }}",
            "new_tenant_token": ${{ toJson(github.event.client_payload.tenant_token) }}
          }' > ./terraform/terraform.tfvars.json

      - name: Remove Terraform Lock (if exists)
        run: |
          gsutil rm gs://$BUCKET_NAME/terraform/tenant_state/${{ github.event.client_payload.tenant_id }}/default.tflock || true
        continue-on-error: true

      - name: Terraform Init for Destroy
        run: |
          terraform init \
            -backend-config="bucket=$BUCKET_NAME" \
            -backend-config="prefix=terraform/tenant_state/${{ github.event.client_payload.tenant_id }}"
        working-directory: ./terraform

      - name: Terraform Destroy
        run: |
          set +e
          TF_LOG=DEBUG terraform destroy -auto-approve -var-file=terraform.tfvars.json 2>&1 | tee terraform_destroy.log
          exit_code=$?
          if [ $exit_code -ne 0 ]; then
            echo "Terraform destroy failed"
            exit $exit_code
          fi
        working-directory: ./terraform

      - name: Upload Terraform Destroy Log
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: terraform-destroy-log
          path: ./terraform/terraform_destroy.log