name: Terraform Deploy

on:
  repository_dispatch:
    types: [new_client]

jobs:
  terraform:
    name: Terraform
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: '1.3.0'

      - name: Terraform Init
        run: |
          terraform init \
            -backend-config="bucket=terraform-state-semantic-dev" \
            -backend-config="prefix=terraform/client_state/${{ github.event.client_payload.client_id }}"
        working-directory: ./terraform

      - name: Terraform Validate
        run: terraform validate
        working-directory: ./terraform

      # **Debug Step: Print New Client Token**
      - name: Debug New Client Token
        run: |
          # Mask sensitive parts of the token
          MASKED_TOKEN=$(echo "${GITHUB_EVENT_CLIENT_TOKEN}" | jq '{
            access_token: "****",
            expires_in: .expires_in,
            token_type: .token_type,
            refresh_token: "****",
            id_token: "****",
            scope: .scope
          }')
          echo "New Client Token: $MASKED_TOKEN"
        env:
          GITHUB_EVENT_CLIENT_TOKEN: ${{ toJson(github.event.client_payload.client_token) }}

      - name: Terraform Plan
        id: plan
        run: |
          TF_LOG=DEBUG terraform plan -out=tfplan \
            -var="new_client_id=${{ github.event.client_payload.client_id }}" \
            -var="new_client_token=${{ toJson(github.event.client_payload.client_token) }}" 2>&1 | tee terraform_plan.log
        working-directory: ./terraform

      - name: Upload Terraform Plan Log
        uses: actions/upload-artifact@v3
        with:
          name: terraform-plan-log
          path: ./terraform/terraform_plan.log

      - name: Terraform Apply
        run: terraform apply -auto-approve tfplan
        working-directory: ./terraform

      - name: Save Outputs
        if: success()
        run: terraform output -json > terraform_outputs.json
        working-directory: ./terraform

      - name: Upload Terraform Outputs
        if: success()
        uses: actions/upload-artifact@v3
        with:
          name: terraform-outputs
          path: ./terraform/terraform_outputs.json